package org.open.erp.services.proman.teste;

import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.xml.DOMConfigurator;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.open.erp.services.buget.BugetareSrv;
import org.open.erp.services.proman.Proiect;
import org.open.erp.services.proman.ProjectManagementSrv;
import static org.junit.Assert.*; 

/**
 * 
 * Foloseste numai ERP.API fara dependente relativ la implementare.
 * Instantele concrete de implementare ale serviciilor sunt furnizate de o clasa Factory.
 * 
 * @author catalin.strimbei
 *
 */
public class TestLogProjectManagementSrv {
	private static java.util.logging.Logger logger;
	ProjectManagementSrv promanInstance;
	
	@BeforeClass
	public static void initLocalJavaLogger(){
		logger =  java.util.logging.Logger.getLogger(TestLogProjectManagementSrv.class.getName());
		logger.setLevel(java.util.logging.Level.INFO);
	    logger.setUseParentHandlers(false);
	    java.util.logging.Handler conHdlr = new java.util.logging.ConsoleHandler();
	    conHdlr.setFormatter(new java.util.logging.Formatter() {
	      public String format(java.util.logging.LogRecord record) {
	        return record.getLevel() + "  :  "
	            + record.getSourceClassName() + " -:- "
	            + record.getSourceMethodName() + " -:- "
	            + record.getMessage() + "\n";
	      }
	    });
	    logger.addHandler(conHdlr);		
		
	}
	
	@Before public void initFixture(){
		
		// Initializare log4j din fisier XML
		//System.out.println(ClassLoader.getSystemClassLoader().getResource(""));
		//DOMConfigurator.configure("bin/Log4j.xml"); -- Default location
		//DOMConfigurator.configure(ClassLoader.getSystemClassLoader().getResource("org/erp/cfg/ERPLog4j.xml"));
		//DOMConfigurator.configure("bin/org/erp/cfg/ERPLog4j.xml");
		
		//BasicConfigurator.configure();
		
		promanInstance= ProjectManagementDummyFactory.getProjectManagementSrv();
		//System.out.println("End fixture");
		logger.info("End fixture");
	}
	
	@Test
	public void testCreareProiect(){
		logger.info("Begin test");
		//System.out.println("Begin test");
		
		Double valoareBugetata = 0.0;
		Proiect proiect = promanInstance.creareProiect("Test", null, null, null, valoareBugetata);
		assertNotNull("Nu exista proiect nou!", proiect);
		assertNotNull("Proiectul nu are buget alocat!", proiect.getBuget());
		assertEquals("Valoarea bugetata nu concorda cu bugetul alocat!", valoareBugetata, proiect.getBuget().getValoareBuget());
		
		
		//System.out.println("Test TestProjectManagementSrv OK;");
		logger.log(java.util.logging.Level.INFO, "Test TestProjectManagementSrv OK!");
	}
}
